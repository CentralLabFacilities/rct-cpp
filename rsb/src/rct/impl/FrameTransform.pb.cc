// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameTransform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FrameTransform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rct {

namespace {

const ::google::protobuf::Descriptor* FrameTransform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameTransform_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FrameTransform_2eproto() {
  protobuf_AddDesc_FrameTransform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FrameTransform.proto");
  GOOGLE_CHECK(file != NULL);
  FrameTransform_descriptor_ = file->message_type(0);
  static const int FrameTransform_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTransform, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTransform, frame_parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTransform, frame_child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTransform, time_),
  };
  FrameTransform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameTransform_descriptor_,
      FrameTransform::default_instance_,
      FrameTransform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTransform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTransform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameTransform));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FrameTransform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameTransform_descriptor_, &FrameTransform::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FrameTransform_2eproto() {
  delete FrameTransform::default_instance_;
  delete FrameTransform_reflection_;
}

void protobuf_AddDesc_FrameTransform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rst::geometry::protobuf_AddDesc_rst_2fgeometry_2fPose_2eproto();
  ::rst::timing::protobuf_AddDesc_rst_2ftiming_2fTimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024FrameTransform.proto\022\003rct\032\027rst/geometr"
    "y/Pose.proto\032\032rst/timing/Timestamp.proto"
    "\"\207\001\n\016FrameTransform\022%\n\ttransform\030\001 \001(\0132\022"
    ".rst.geometry.Pose\022\024\n\014frame_parent\030\002 \002(\t"
    "\022\023\n\013frame_child\030\003 \002(\t\022#\n\004time\030\004 \001(\0132\025.rs"
    "t.timing.TimestampB\033\n\trct.protoB\016FrameTr"
    "ansform", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FrameTransform.proto", &protobuf_RegisterTypes);
  FrameTransform::default_instance_ = new FrameTransform();
  FrameTransform::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FrameTransform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FrameTransform_2eproto {
  StaticDescriptorInitializer_FrameTransform_2eproto() {
    protobuf_AddDesc_FrameTransform_2eproto();
  }
} static_descriptor_initializer_FrameTransform_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FrameTransform::kTransformFieldNumber;
const int FrameTransform::kFrameParentFieldNumber;
const int FrameTransform::kFrameChildFieldNumber;
const int FrameTransform::kTimeFieldNumber;
#endif  // !_MSC_VER

FrameTransform::FrameTransform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameTransform::InitAsDefaultInstance() {
  transform_ = const_cast< ::rst::geometry::Pose*>(&::rst::geometry::Pose::default_instance());
  time_ = const_cast< ::rst::timing::Timestamp*>(&::rst::timing::Timestamp::default_instance());
}

FrameTransform::FrameTransform(const FrameTransform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameTransform::SharedCtor() {
  _cached_size_ = 0;
  transform_ = NULL;
  frame_parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frame_child_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameTransform::~FrameTransform() {
  SharedDtor();
}

void FrameTransform::SharedDtor() {
  if (frame_parent_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_parent_;
  }
  if (frame_child_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_child_;
  }
  if (this != default_instance_) {
    delete transform_;
    delete time_;
  }
}

void FrameTransform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameTransform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameTransform_descriptor_;
}

const FrameTransform& FrameTransform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameTransform_2eproto();
  return *default_instance_;
}

FrameTransform* FrameTransform::default_instance_ = NULL;

FrameTransform* FrameTransform::New() const {
  return new FrameTransform;
}

void FrameTransform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transform()) {
      if (transform_ != NULL) transform_->::rst::geometry::Pose::Clear();
    }
    if (has_frame_parent()) {
      if (frame_parent_ != &::google::protobuf::internal::kEmptyString) {
        frame_parent_->clear();
      }
    }
    if (has_frame_child()) {
      if (frame_child_ != &::google::protobuf::internal::kEmptyString) {
        frame_child_->clear();
      }
    }
    if (has_time()) {
      if (time_ != NULL) time_->::rst::timing::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rst.geometry.Pose transform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frame_parent;
        break;
      }

      // required string frame_parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frame_parent().data(), this->frame_parent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frame_child;
        break;
      }

      // required string frame_child = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_child()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frame_child().data(), this->frame_child().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // optional .rst.timing.Timestamp time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rst.geometry.Pose transform = 1;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transform(), output);
  }

  // required string frame_parent = 2;
  if (has_frame_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frame_parent().data(), this->frame_parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->frame_parent(), output);
  }

  // required string frame_child = 3;
  if (has_frame_child()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frame_child().data(), this->frame_child().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->frame_child(), output);
  }

  // optional .rst.timing.Timestamp time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameTransform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rst.geometry.Pose transform = 1;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transform(), target);
  }

  // required string frame_parent = 2;
  if (has_frame_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frame_parent().data(), this->frame_parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_parent(), target);
  }

  // required string frame_child = 3;
  if (has_frame_child()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frame_child().data(), this->frame_child().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frame_child(), target);
  }

  // optional .rst.timing.Timestamp time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameTransform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rst.geometry.Pose transform = 1;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform());
    }

    // required string frame_parent = 2;
    if (has_frame_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_parent());
    }

    // required string frame_child = 3;
    if (has_frame_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_child());
    }

    // optional .rst.timing.Timestamp time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameTransform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameTransform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameTransform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameTransform::MergeFrom(const FrameTransform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transform()) {
      mutable_transform()->::rst::geometry::Pose::MergeFrom(from.transform());
    }
    if (from.has_frame_parent()) {
      set_frame_parent(from.frame_parent());
    }
    if (from.has_frame_child()) {
      set_frame_child(from.frame_child());
    }
    if (from.has_time()) {
      mutable_time()->::rst::timing::Timestamp::MergeFrom(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameTransform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTransform::CopyFrom(const FrameTransform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTransform::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_transform()) {
    if (!this->transform().IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void FrameTransform::Swap(FrameTransform* other) {
  if (other != this) {
    std::swap(transform_, other->transform_);
    std::swap(frame_parent_, other->frame_parent_);
    std::swap(frame_child_, other->frame_child_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameTransform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameTransform_descriptor_;
  metadata.reflection = FrameTransform_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rct

// @@protoc_insertion_point(global_scope)
