cmake_minimum_required(VERSION 2.8)
INCLUDE(FindPkgConfig)
INCLUDE(UsePkgConfig)

# --- general project setup ---
PROJECT("RoboticsCoordinateTransform")
SET(RCT_NAME rct)
SET(RCT_NAME_RSB rctrsb)
SET(RCT_NAME_ROS rctros)
SET(RCT_VERSION_MAJOR "1")
SET(RCT_VERSION_MINOR "0")
SET(RCT_VERSION_REVISION "0")
SET(RCT_VERSION_SHORT "${RCT_VERSION_MAJOR}.${RCT_VERSION_MINOR}")
SET(RCT_API_VERSION "${RCT_VERSION_MAJOR}.${RCT_VERSION_MINOR}")
SET(RCT_VERSION "${RCT_VERSION_MAJOR}.${RCT_VERSION_MINOR}.${RCT_VERSION_REVISION}")
MATH(EXPR RCT_VERSION_MAJOR_CONT "${RCT_VERSION_MAJOR}*1000000")
MATH(EXPR RCT_VERSION_MINOR_CONT "${RCT_VERSION_MINOR}*1000")
MATH(EXPR RCT_VERSION_REVISION_CONT "${RCT_VERSION_REVISION}*1")
MATH(EXPR RCT_VERSION_CONT "${RCT_VERSION_MAJOR_CONT}+${RCT_VERSION_MINOR_CONT}+${RCT_VERSION_REVISION_CONT}")

SET(PREFIX ${CMAKE_INSTALL_PREFIX})
SET(BINDIR "${PREFIX}/bin")
SET(INCLUDEDIR "${PREFIX}/include")
SET(MANDIR "${PREFIX}/man")
SET(LIBDIR "${PREFIX}/lib/")
SET(DATADIR "${PREFIX}/share/${PACKET}")

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

# --- dependencies ---
#rsc
FIND_PACKAGE(RSC 0.11 REQUIRED)
MESSAGE(STATUS "RSC version: ${RSC_VERSION}")
MESSAGE(STATUS "RSC libraries: ${RSC_LIBRARIES}")
MESSAGE(STATUS "RSC runtime library dirs: ${RSC_RUNTIME_LIBRARY_DIRS}")
MESSAGE(STATUS "RSC CMake module path: ${RSC_CMAKE_MODULE_PATH}")
INCLUDE_DIRECTORIES(BEFORE SYSTEM ${RSC_INCLUDE_DIRS})
LINK_DIRECTORIES(${RSC_LIBRARY_DIRS})

SET(PROJECT_CMAKE_PATH "${CMAKE_INSTALL_PREFIX}/share/cmake/Modules")
#SET(CMAKE_MODULE_PATH ${PROJECT_CMAKE_PATH} ${CMAKE_MODULE_PATH} ${RSC_CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/Modules )
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules )
MESSAGE(STATUS "Using CMake module path: ${CMAKE_MODULE_PATH}")

FIND_PACKAGE(Eigen3 REQUIRED)
INCLUDE_DIRECTORIES(BEFORE SYSTEM  ${Eigen3_INCLUDE_DIRS})
LINK_DIRECTORIES(${Eigen3_LIBRARY_DIRS})

FIND_PACKAGE(Log4cxx REQUIRED)
INCLUDE_DIRECTORIES(BEFORE SYSTEM  ${Log4cxx_INCLUDE_DIRS})
LINK_DIRECTORIES(${Log4cxx_LIBRARY_DIRS})

FIND_PACKAGE(tf2 QUIET)
INCLUDE_DIRECTORIES(BEFORE SYSTEM  ${tf2_INCLUDE_DIRS})
LINK_DIRECTORIES(${tf2_LIBRARY_DIRS})
IF(tf2_FOUND)
	MESSAGE(STATUS "tf2 version: ${tf2_VERSION}")
	SET(RCT_HAVE_TF2 TRUE)
ELSE(tf2_FOUND)
	MESSAGE(STATUS "tf2 not found. Support will NOT be built!")
ENDIF(tf2_FOUND)

#rsb/t
FIND_PACKAGE(RSB 0.11 QUIET)
FIND_PACKAGE(RST 0.11 QUIET)
IF(RSB_FOUND AND RST_FOUND)
	MESSAGE(STATUS "RSB version: ${RSB_VERSION}")
	MESSAGE(STATUS "RST version: ${RST_VERSION}")
	SET(RCT_HAVE_RSB TRUE)
	INCLUDE_DIRECTORIES(BEFORE SYSTEM  ${RSB_INCLUDE_DIRS} ${RST_INCLUDE_DIRS})
	LINK_DIRECTORIES(${RSB_LIBRARY_DIRS})
	ADD_DEFINITIONS(${RST_CFLAGS})
ELSE(RSB_FOUND AND RST_FOUND)
	MESSAGE(STATUS "RSB/RST not found. Support will NOT be built!")
ENDIF(RSB_FOUND AND RST_FOUND)

#boost
FIND_PACKAGE(Boost REQUIRED QUIET COMPONENTS thread program_options date_time)
INCLUDE_DIRECTORIES(Boost_INCLUDE_DIRS)
ADD_DEFINITIONS(-DBOOST_LOG_DYN_LINK)

# --- build instructions ---
ADD_SUBDIRECTORY(core/src)
ADD_SUBDIRECTORY(rsb/src)
ADD_SUBDIRECTORY(ros/src)
ADD_SUBDIRECTORY(apps/src)
